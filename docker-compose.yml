version: "3.8"
services:

#  mongo:
#    container_name: mongo
#    image: mongo:latest
#    ports:
#      - '27017:27017'
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: admin
#      MONGO_INITDB_ROOT_PASSWORD: admin
#    networks:
#      - microservices-devops
#    restart: always
#
#  mongo-express:
#    container_name: mongo-express
#    image: mongo-express:latest
#    ports:
#      - '8081:8081'
#    environment:
#      ME_CONFIG_MONGODB_SERVER: mongo
#      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
#      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
#    networks:
#      - microservices-devops
#    restart: always
#
#  postgres:
#    image: postgres:latest
#    container_name: postgres
#    restart: always
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: authorization_db
#    volumes:
#      - postgres-data:/var/lib/postgresql/data
#    networks:
#      - microservices-devops
#
#  mysql:
#    container_name: mysql
#    image: mysql:8.0
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_DATABASE: cart_db
#    ports:
#      - '3306:3306'
#    networks:
#      - microservices-devops
#    restart: always
#    volumes:
#      - mysql_data:/var/lib/mysql
#    healthcheck:
#      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", '-proot' ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 60s
#
#  authorization-server:
#    container_name: authorization-server
#    image: rupesh1997/authorization-server:1.0.0
#    ports:
#      - '9191:9191'
#    networks:
#      - microservices-devops
#    restart: always
#    depends_on:
#      - postgres
#
#  cart-service:
#    container_name: cart-service
#    image: rupesh1997/cart-service:1.0.0
#    ports:
#      - '9292:9292'
#    networks:
#      - microservices-devops
#    restart: always
#    depends_on:
#      - mysql
#
#  chat-server:
#    container_name: chat-server
#    image: rupesh1997/chat-server:1.0.0
#    ports:
#      - '9393:9393'
#    networks:
#      - microservices-devops
#    restart: always
#    depends_on:
#      - mongo
#
#  config-server:
#    container_name: config-server
#    image: rupesh1997/config-server:1.0.0
#    ports:
#      - '8888:8888'
#    networks:
#      - microservices-devops
#    restart: always
#
#  discovery-server:
#    container_name: discovery-server
#    image: rupesh1997/discovery-server:1.0.0
#    ports:
#      - '8761:8761'
#    networks:
#      - microservices-devops
#
#  gateway-service:
#    container_name: gateway-service
#    image: rupesh1997/gateway-service:1.0.0
#    ports:
#      - '8080:8080'
#    networks:
#      - microservices-devops
#
#  inventory-service:
#    container_name: inventory-service
#    image: rupesh1997/inventory-service:1.0.0
#    ports:
#      - '8181:8181'
#    networks:
#      - microservices-devops
#
#  notification-service:
#    container_name: notification-service
#    image: rupesh1997/notification-service:1.0.0
#    ports:
#      - '8282:8282'
#    networks:
#      - microservices-devops
#
#  order-service:
#    container_name: order-service
#    image: rupesh1997/order-service:1.0.0
#    ports:
#      - '8383:8383'
#    networks:
#      - microservices-devops
#
#  payment-service:
#    container_name: payment-service
#    image: rupesh1997/payment-service:1.0.0
#    ports:
#      - '8484:8484'
#    networks:
#      - microservices-devops
#
#  shipping-service:
#    container_name: shipping-service
#    image: rupesh1997/shipping-service:1.0.0
#    ports:
#      - '8686:8686'
#    networks:
#      - microservices-devops
#
#  user-service:
#    container_name: user-service
#    image: rupesh1997/user-service:1.0.0
#    ports:
#      - '8585:8585'
#    networks:
#      - microservices-devops

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-devops

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - microservices-devops

#  redis:
#    image: redis:latest
#    container_name: redis
#    restart: always
#    ports:
#      - "6379:6379"
#    command: redis-server --appendonly yes
#    volumes:
#      - redis-data:/data
#    networks:
#      - microservices-devops

volumes:
#  mysql_data:
#    driver: local
  kafka-data:
#  redis-data:
#  postgres-data:

networks:
  microservices-devops:
    driver: bridge